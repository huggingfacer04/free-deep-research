# BMAD AI Agent Templates
# Professional document templates for all agent deliverables

==================== START: prd-template ====================
# Product Requirements Document (PRD) Template

# {Product Name} - Product Requirements Document

## Executive Summary
**Product Vision**: {Brief vision statement}
**Target Market**: {Primary target audience}
**Key Value Proposition**: {Main value delivered to users}
**Success Metrics**: {Primary KPIs and success criteria}

## 1. Product Overview

### 1.1 Product Description
{Detailed description of the product and its purpose}

### 1.2 Target Users
- **Primary Users**: {Main user personas}
- **Secondary Users**: {Additional user groups}
- **User Needs**: {Key problems being solved}

### 1.3 Market Context
- **Market Size**: {Total addressable market}
- **Competitive Landscape**: {Key competitors and differentiation}
- **Market Trends**: {Relevant industry trends}

## 2. Functional Requirements

### 2.1 Core Features
{List of essential features with descriptions}

### 2.2 User Stories
{User stories in format: As a [user], I want [goal] so that [benefit]}

### 2.3 Acceptance Criteria
{Specific, measurable criteria for each feature}

## 3. Non-Functional Requirements

### 3.1 Performance Requirements
- **Response Time**: {Maximum acceptable response times}
- **Throughput**: {Expected transaction volumes}
- **Scalability**: {Growth expectations and limits}

### 3.2 Security Requirements
- **Authentication**: {User authentication requirements}
- **Authorization**: {Access control requirements}
- **Data Protection**: {Data security and privacy requirements}

### 3.3 Usability Requirements
- **Accessibility**: {WCAG compliance level}
- **Browser Support**: {Supported browsers and versions}
- **Mobile Compatibility**: {Mobile device requirements}

## 4. Technical Considerations

### 4.1 Integration Requirements
{External systems and APIs to integrate with}

### 4.2 Data Requirements
{Data models, storage, and migration needs}

### 4.3 Platform Requirements
{Deployment platforms and infrastructure needs}

## 5. Success Metrics

### 5.1 Key Performance Indicators (KPIs)
{Measurable metrics to track success}

### 5.2 Success Criteria
{Specific targets for each KPI}

### 5.3 Measurement Plan
{How and when metrics will be collected and reviewed}

## 6. Timeline and Milestones

### 6.1 Development Phases
{High-level phases and their objectives}

### 6.2 Key Milestones
{Critical milestones with target dates}

### 6.3 Dependencies
{External dependencies that could impact timeline}

## 7. Risks and Mitigation

### 7.1 Technical Risks
{Potential technical challenges and mitigation strategies}

### 7.2 Business Risks
{Market, competitive, or business risks and responses}

### 7.3 Resource Risks
{Team, budget, or timeline risks and contingencies}

## 8. Appendices

### 8.1 User Research
{Supporting user research and validation}

### 8.2 Market Analysis
{Detailed market research and competitive analysis}

### 8.3 Technical Specifications
{Detailed technical requirements and constraints}

---
**Document Version**: 1.0
**Last Updated**: {Date}
**Owner**: {Product Manager Name}
**Stakeholders**: {List of key stakeholders}
==================== END: prd-template ====================

==================== START: architecture-template ====================
# System Architecture Document Template

# {System Name} - Architecture Document

## Executive Summary
**System Purpose**: {Brief description of system purpose}
**Architecture Style**: {Microservices, monolithic, serverless, etc.}
**Key Technologies**: {Primary technology stack}
**Deployment Model**: {Cloud, on-premise, hybrid}

## 1. Architecture Overview

### 1.1 System Context
{High-level system context and boundaries}

### 1.2 Architecture Principles
- **Scalability**: {Approach to handling growth}
- **Reliability**: {Availability and fault tolerance strategy}
- **Security**: {Security-by-design principles}
- **Maintainability**: {Code organization and modularity}

### 1.3 Quality Attributes
{Performance, security, usability, and other quality requirements}

## 2. System Architecture

### 2.1 High-Level Architecture
{Architecture diagram and component overview}

### 2.2 Component Breakdown
{Detailed description of each major component}

### 2.3 Data Flow
{How data moves through the system}

## 3. Technology Stack

### 3.1 Frontend Technologies
- **Framework**: {React, Vue, Angular, etc.}
- **State Management**: {Redux, Vuex, etc.}
- **Build Tools**: {Webpack, Vite, etc.}
- **Testing**: {Jest, Cypress, etc.}

### 3.2 Backend Technologies
- **Runtime**: {Node.js, Python, Rust, etc.}
- **Framework**: {Express, FastAPI, Actix, etc.}
- **Database**: {PostgreSQL, MongoDB, etc.}
- **Caching**: {Redis, Memcached, etc.}

### 3.3 Infrastructure
- **Cloud Provider**: {AWS, Azure, GCP, etc.}
- **Containerization**: {Docker, Kubernetes}
- **CI/CD**: {GitHub Actions, Jenkins, etc.}
- **Monitoring**: {Prometheus, Grafana, etc.}

## 4. Data Architecture

### 4.1 Data Models
{Entity relationship diagrams and data structures}

### 4.2 Database Design
{Database schema and optimization strategies}

### 4.3 Data Flow and Processing
{ETL processes and data pipelines}

## 5. Security Architecture

### 5.1 Authentication and Authorization
{Identity management and access control}

### 5.2 Data Protection
{Encryption, data classification, and privacy}

### 5.3 Network Security
{Firewalls, VPNs, and network segmentation}

## 6. Deployment Architecture

### 6.1 Environment Strategy
{Development, staging, and production environments}

### 6.2 Deployment Pipeline
{CI/CD process and automation}

### 6.3 Infrastructure as Code
{Terraform, CloudFormation, or other IaC tools}

## 7. Monitoring and Observability

### 7.1 Logging Strategy
{Centralized logging and log management}

### 7.2 Metrics and Monitoring
{Application and infrastructure monitoring}

### 7.3 Alerting and Incident Response
{Alert configuration and response procedures}

## 8. Performance and Scalability

### 8.1 Performance Requirements
{Response time, throughput, and capacity targets}

### 8.2 Scalability Strategy
{Horizontal and vertical scaling approaches}

### 8.3 Optimization Techniques
{Caching, CDN, and performance optimizations}

## 9. Implementation Plan

### 9.1 Development Phases
{Phased implementation approach}

### 9.2 Migration Strategy
{Data and system migration plans}

### 9.3 Risk Mitigation
{Technical risks and mitigation strategies}

---
**Document Version**: 1.0
**Last Updated**: {Date}
**Architect**: {Architect Name}
**Reviewers**: {List of technical reviewers}
==================== END: architecture-template ====================

==================== START: checklist-template ====================
# Development Checklist Template

# {Project Name} - Development Checklist

## Project Information
**Project**: {Project Name}
**Version**: {Version Number}
**Start Date**: {Start Date}
**Target Completion**: {Target Date}
**Project Manager**: {PM Name}

## Phase 1: Planning and Design ✅

### Requirements Gathering
- [ ] Business requirements documented
- [ ] Functional requirements defined
- [ ] Non-functional requirements specified
- [ ] User stories created with acceptance criteria
- [ ] Requirements reviewed and approved by stakeholders

### Architecture and Design
- [ ] System architecture designed
- [ ] Database schema designed
- [ ] API specifications created
- [ ] UI/UX wireframes completed
- [ ] Security architecture reviewed
- [ ] Performance requirements defined

### Project Setup
- [ ] Development environment configured
- [ ] Version control repository created
- [ ] CI/CD pipeline established
- [ ] Project documentation structure created
- [ ] Team roles and responsibilities defined

## Phase 2: Development ⚙️

### Backend Development
- [ ] Database setup and migrations
- [ ] API endpoints implemented
- [ ] Authentication and authorization
- [ ] Business logic implementation
- [ ] Error handling and validation
- [ ] Unit tests written (minimum 80% coverage)

### Frontend Development
- [ ] Component library setup
- [ ] Page layouts implemented
- [ ] State management configured
- [ ] API integration completed
- [ ] Responsive design implemented
- [ ] Accessibility standards met (WCAG 2.1 AA)

### Integration
- [ ] Frontend-backend integration tested
- [ ] Third-party service integrations
- [ ] Database integration verified
- [ ] API documentation updated
- [ ] Integration tests written

## Phase 3: Testing and Quality Assurance 🧪

### Testing
- [ ] Unit tests passing (>80% coverage)
- [ ] Integration tests passing
- [ ] End-to-end tests implemented
- [ ] Performance testing completed
- [ ] Security testing conducted
- [ ] Accessibility testing performed

### Code Quality
- [ ] Code review completed
- [ ] Static code analysis passed
- [ ] Code formatting standards applied
- [ ] Documentation updated
- [ ] Technical debt addressed

### User Acceptance Testing
- [ ] UAT environment prepared
- [ ] Test scenarios created
- [ ] Stakeholder testing completed
- [ ] Feedback incorporated
- [ ] Final approval received

## Phase 4: Deployment and Launch 🚀

### Pre-Deployment
- [ ] Production environment prepared
- [ ] Database migration scripts tested
- [ ] Backup and recovery procedures verified
- [ ] Monitoring and alerting configured
- [ ] Security configurations applied

### Deployment
- [ ] Application deployed to production
- [ ] Database migrations executed
- [ ] SSL certificates configured
- [ ] DNS configuration updated
- [ ] Health checks passing

### Post-Deployment
- [ ] Smoke tests passed
- [ ] Performance monitoring active
- [ ] Error tracking configured
- [ ] User feedback collection setup
- [ ] Documentation updated

## Phase 5: Maintenance and Support 🔧

### Monitoring
- [ ] Application performance monitored
- [ ] Error rates within acceptable limits
- [ ] User feedback reviewed
- [ ] Security monitoring active
- [ ] Backup procedures verified

### Documentation
- [ ] User documentation completed
- [ ] API documentation updated
- [ ] Deployment guide created
- [ ] Troubleshooting guide available
- [ ] Knowledge transfer completed

### Handover
- [ ] Support team trained
- [ ] Monitoring dashboards configured
- [ ] Incident response procedures documented
- [ ] Maintenance schedule established
- [ ] Project retrospective completed

## Acceptance Criteria ✅

### Functional Acceptance
- [ ] All user stories completed and tested
- [ ] Business requirements met
- [ ] Performance targets achieved
- [ ] Security requirements satisfied
- [ ] Accessibility standards met

### Technical Acceptance
- [ ] Code quality standards met
- [ ] Test coverage targets achieved
- [ ] Documentation complete and accurate
- [ ] Deployment automation working
- [ ] Monitoring and alerting operational

### Business Acceptance
- [ ] Stakeholder approval received
- [ ] User acceptance testing passed
- [ ] Go-live criteria met
- [ ] Support processes in place
- [ ] Success metrics defined and tracked

---
**Checklist Version**: 1.0
**Last Updated**: {Date}
**Project Manager**: {PM Name}
**Sign-off**: {Stakeholder signatures}
==================== END: checklist-template ====================
