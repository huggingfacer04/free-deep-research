name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: '1.0.0'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            os: macos-latest
            target: x86_64-apple-darwin
            arch: x64
          - platform: 'macos-latest'
            os: macos-latest
            target: aarch64-apple-darwin
            arch: arm64
          - platform: 'ubuntu-20.04'
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            arch: x64
          - platform: 'windows-latest'
            os: windows-latest
            target: x86_64-pc-windows-msvc
            arch: x64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: bmad-agent/free-deep-research/package-lock.json
        
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true
        
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y webkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          bmad-agent/free-deep-research/src-tauri/target/
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Install dependencies
      working-directory: bmad-agent/free-deep-research
      run: npm ci
      
    - name: Build frontend
      working-directory: bmad-agent/free-deep-research
      run: npm run build:frontend
      
    - name: Build Tauri application
      working-directory: bmad-agent/free-deep-research
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          npm run build:macos
        elif [ "${{ matrix.os }}" = "ubuntu-20.04" ]; then
          npm run build:linux
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          npm run build:windows
        fi
      shell: bash
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          bmad-agent/free-deep-research/src-tauri/target/release/bundle/
        retention-days: 30
        
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
        
    - name: Create release notes
      id: release_notes
      run: |
        echo "## What's Changed" > release_notes.md
        echo "" >> release_notes.md
        echo "### Features" >> release_notes.md
        echo "- Enterprise-grade deep research system" >> release_notes.md
        echo "- Multi-API integration with intelligent rate limiting" >> release_notes.md
        echo "- Real-time monitoring and analytics" >> release_notes.md
        echo "- Secure API key management with AES-256 encryption" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Improvements" >> release_notes.md
        echo "- Enhanced user interface with Tailwind CSS" >> release_notes.md
        echo "- Improved error handling and recovery" >> release_notes.md
        echo "- Better performance monitoring" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Technical Details" >> release_notes.md
        echo "- Built with Tauri 2.0 and React 18" >> release_notes.md
        echo "- Rust backend for maximum performance" >> release_notes.md
        echo "- TypeScript frontend for type safety" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Installation" >> release_notes.md
        echo "1. Download the appropriate installer for your platform" >> release_notes.md
        echo "2. Run the installer and follow the setup instructions" >> release_notes.md
        echo "3. Configure your API keys in the settings" >> release_notes.md
        echo "4. Start researching!" >> release_notes.md
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/**/*
        body_path: release_notes.md
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: bmadteam/free-deep-research
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: bmad-agent/free-deep-research
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
