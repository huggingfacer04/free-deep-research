version: '3.8'

services:
  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================
  
  # Main Application (Development)
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile.dev
      args:
        - NODE_ENV=development
        - RUST_ENV=development
    ports:
      - "${APP_PORT:-3000}:3000"
      - "${API_PORT:-8080}:8080"
      - "9229:9229"  # Node.js debugger
    environment:
      - NODE_ENV=development
      - RUST_ENV=development
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@database:5432/${DB_NAME}
      - REDIS_URL=redis://redis:6379
      - RUST_LOG=debug
      - RUST_BACKTRACE=full
    volumes:
      - .:/app
      - /app/node_modules
      - /app/target
      - app_data:/app/data
    depends_on:
      - database
      - redis
    restart: unless-stopped
    networks:
      - dev-network
    command: ["npm", "run", "dev"]

  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  # PostgreSQL Database (Development)
  database:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/database/init:/docker-entrypoint-initdb.d
      - ./docker/database/dev-config.conf:/etc/postgresql/postgresql.conf
    restart: unless-stopped
    networks:
      - dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache (Development)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/dev-redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    networks:
      - dev-network
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================
  
  # Database Administration (Adminer)
  adminer:
    image: adminer:latest
    ports:
      - "${ADMINER_PORT:-8082}:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=database
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      - database
    restart: unless-stopped
    networks:
      - dev-network

  # Redis Administration (Redis Commander)
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "${REDIS_COMMANDER_PORT:-8083}:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - dev-network

  # Email Testing (MailHog)
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"
    restart: unless-stopped
    networks:
      - dev-network

  # Development Dashboard
  dev-dashboard:
    image: nginx:alpine
    ports:
      - "${DEV_DASHBOARD_PORT:-8081}:80"
    volumes:
      - ./docker/dev-dashboard/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/dev-dashboard/html:/usr/share/nginx/html
    depends_on:
      - app
      - adminer
      - redis-commander
      - mailhog
    restart: unless-stopped
    networks:
      - dev-network

  # =============================================================================
  # MONITORING SERVICES (OPTIONAL FOR DEVELOPMENT)
  # =============================================================================
  
  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - dev-network

  # Grafana (Metrics Visualization)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./docker/monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - dev-network

  # =============================================================================
  # TESTING SERVICES
  # =============================================================================
  
  # Test Database (Separate from development)
  test-database:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${DB_NAME}_test
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    restart: "no"
    networks:
      - dev-network
    profiles:
      - testing

  # Test Runner
  test-runner:
    build:
      context: .
      dockerfile: docker/testing/Dockerfile.test
    environment:
      - NODE_ENV=test
      - TEST_DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@test-database:5432/${DB_NAME}_test
    volumes:
      - .:/app
      - /app/node_modules
    depends_on:
      - test-database
    restart: "no"
    networks:
      - dev-network
    profiles:
      - testing

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  test_postgres_data:
    driver: local
  redis_data:
    driver: local
  app_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
