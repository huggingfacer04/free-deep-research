# Free Deep Research System - Unified GraphQL Schema
# Phase 4.4: API Gateway & GraphQL

# Scalar types
scalar DateTime
scalar UUID
scalar JSON
scalar Upload

# Root Query type
type Query {
  # Authentication & User Management
  me: User
  users(filter: UserFilter, pagination: PaginationInput): UserConnection!
  user(id: UUID!): User
  
  # API Key Management
  apiKeys(filter: ApiKeyFilter, pagination: PaginationInput): ApiKeyConnection!
  apiKey(id: UUID!): ApiKey
  apiKeyUsageStats(keyId: UUID!, timeRange: TimeRange): UsageStats!
  
  # Research Workflows
  researchWorkflows(filter: WorkflowFilter, pagination: PaginationInput): WorkflowConnection!
  researchWorkflow(id: UUID!): ResearchWorkflow
  researchTemplates(filter: TemplateFilter): [ResearchTemplate!]!
  researchTemplate(id: UUID!): ResearchTemplate
  
  # System Configuration
  systemConfig: SystemConfiguration!
  userConfig(userId: UUID): UserConfiguration!
  
  # Monitoring & Analytics
  systemMetrics(timeRange: TimeRange): SystemMetrics!
  performanceMetrics(service: String, timeRange: TimeRange): PerformanceMetrics!
  auditLogs(filter: AuditLogFilter, pagination: PaginationInput): AuditLogConnection!
  
  # V3.0.0 Features
  federatedResearch(filter: FederatedFilter): [FederatedResearchNode!]!
  aiMarketplace(category: MarketplaceCategory): [MarketplaceItem!]!
  quantumResources(filter: QuantumFilter): [QuantumResource!]!
  nlpModels(filter: NLPModelFilter): [NLPModel!]!
  knowledgeGraph(graphId: UUID!): KnowledgeGraph
  knowledgeNodes(graphId: UUID!, filter: NodeFilter): [KnowledgeNode!]!
  
  # BMAD Integration
  bmadAgents: [BMadAgent!]!
  bmadWorkflows(agentId: String): [BMadWorkflow!]!
  
  # Real-time Data
  liveMetrics: LiveMetrics!
  activeConnections: [Connection!]!

  # Phase 5.1: Computer Vision
  visionProcessingJob(jobId: UUID!): VisionProcessingJob
  userVisionHistory(userId: UUID!, limit: Int): [VisionProcessingJob!]!
  visionCostStats: VisionCostTracker!
  availableVisionProviders: [ProviderInfo!]!
  supportedProcessingTypes(provider: VisionProvider!): [VisionProcessingType!]!

  # Phase 5.1: Image Classification
  imageClassificationModel(modelId: UUID!): ImageClassificationModel
  userImageClassificationModels(userId: UUID!): [ImageClassificationModel!]!
  imageClassificationJob(jobId: UUID!): ImageClassificationJob
  imageClassificationStatistics: TrainingStatistics!
}

# Root Mutation type
type Mutation {
  # Authentication
  login(input: LoginInput!): AuthPayload!
  logout: Boolean!
  refreshToken(token: String!): AuthPayload!
  updateProfile(input: UpdateProfileInput!): User!
  
  # API Key Management
  createApiKey(input: CreateApiKeyInput!): ApiKey!
  updateApiKey(id: UUID!, input: UpdateApiKeyInput!): ApiKey!
  deleteApiKey(id: UUID!): Boolean!
  testApiKey(id: UUID!): ApiKeyTestResult!
  rotateApiKey(id: UUID!): ApiKey!
  
  # Research Workflows
  createResearchWorkflow(input: CreateWorkflowInput!): ResearchWorkflow!
  updateResearchWorkflow(id: UUID!, input: UpdateWorkflowInput!): ResearchWorkflow!
  deleteResearchWorkflow(id: UUID!): Boolean!
  executeResearchWorkflow(id: UUID!, input: ExecuteWorkflowInput): WorkflowExecution!
  pauseWorkflowExecution(executionId: UUID!): Boolean!
  resumeWorkflowExecution(executionId: UUID!): Boolean!
  cancelWorkflowExecution(executionId: UUID!): Boolean!
  
  # Template Management
  createResearchTemplate(input: CreateTemplateInput!): ResearchTemplate!
  updateResearchTemplate(id: UUID!, input: UpdateTemplateInput!): ResearchTemplate!
  deleteResearchTemplate(id: UUID!): Boolean!
  
  # Configuration
  updateSystemConfig(input: SystemConfigInput!): SystemConfiguration!
  updateUserConfig(input: UserConfigInput!): UserConfiguration!
  
  # V3.0.0 Features
  createFederatedResearch(input: FederatedResearchInput!): FederatedResearchNode!
  joinFederatedNetwork(networkId: UUID!): Boolean!
  publishToMarketplace(input: MarketplacePublishInput!): MarketplaceItem!
  deployQuantumWorkflow(input: QuantumDeployInput!): QuantumExecution!
  trainNLPModel(input: NLPTrainingInput!): NLPTrainingJob!
  
  # Knowledge Graph
  createKnowledgeGraph(input: CreateKnowledgeGraphInput!): KnowledgeGraph!
  addKnowledgeNode(graphId: UUID!, input: AddNodeInput!): KnowledgeNode!
  addKnowledgeEdge(graphId: UUID!, input: AddEdgeInput!): KnowledgeEdge!
  updateKnowledgeNode(nodeId: UUID!, input: UpdateNodeInput!): KnowledgeNode!
  
  # BMAD Integration
  executeBmadWorkflow(agentId: String!, input: BMadExecutionInput!): BMadExecution!
  updateBmadAgent(agentId: String!, input: BMadAgentInput!): BMadAgent!

  # Phase 5.1: Computer Vision
  processImage(userId: UUID!, input: VisionProcessingRequest!): VisionProcessingResponse!
  cancelVisionProcessing(jobId: UUID!): Boolean!

  # Phase 5.1: Image Classification
  createImageClassificationModel(userId: UUID!, input: ImageClassificationModelInput!): ImageClassificationModel!
  startImageClassificationTraining(modelId: UUID!, userId: UUID!, config: TrainingConfigurationInput!): ImageClassificationJob!
  deployImageClassificationModel(modelId: UUID!, config: DeploymentConfigurationInput!): String!
  classifyImage(input: ImageClassificationRequestInput!): ImageClassificationResponse!
}

# Root Subscription type
type Subscription {
  # Real-time workflow updates
  workflowExecutionUpdates(workflowId: UUID!): WorkflowExecutionUpdate!
  workflowStatusChanged(userId: UUID): WorkflowStatusUpdate!
  
  # System monitoring
  systemMetricsUpdates: SystemMetricsUpdate!
  performanceAlerts: PerformanceAlert!
  
  # API key monitoring
  apiKeyUsageUpdates(keyId: UUID!): ApiKeyUsageUpdate!
  rateLimitAlerts(userId: UUID): RateLimitAlert!
  
  # Federated research
  federatedResearchUpdates(networkId: UUID!): FederatedResearchUpdate!
  collaborationInvites(userId: UUID!): CollaborationInvite!
  
  # Knowledge graph updates
  knowledgeGraphUpdates(graphId: UUID!): KnowledgeGraphUpdate!
  
  # BMAD real-time updates
  bmadExecutionUpdates(executionId: UUID!): BMadExecutionUpdate!

  # Phase 5.1: Computer Vision real-time updates
  visionProcessingUpdates(jobId: UUID!): VisionProcessingJob!
  visionCostUpdates(userId: UUID!): VisionCostTracker!

  # Phase 5.1: Image Classification real-time updates
  imageClassificationTrainingUpdates(jobId: UUID!): ImageClassificationJob!
  imageClassificationModelUpdates(modelId: UUID!): ImageClassificationModel!
}

# User types
type User {
  id: UUID!
  username: String!
  email: String!
  displayName: String
  avatar: String
  role: UserRole!
  permissions: [Permission!]!
  preferences: UserPreferences!
  createdAt: DateTime!
  updatedAt: DateTime!
  lastLoginAt: DateTime
  
  # Relationships
  apiKeys: [ApiKey!]!
  researchWorkflows: [ResearchWorkflow!]!
  federatedNetworks: [FederatedResearchNode!]!
}

enum UserRole {
  ADMIN
  RESEARCHER
  COLLABORATOR
  VIEWER
}

type Permission {
  id: String!
  name: String!
  description: String!
  resource: String!
  actions: [String!]!
}

# API Key types
type ApiKey {
  id: UUID!
  name: String!
  service: ServiceProvider!
  status: ApiKeyStatus!
  rateLimit: Int!
  currentUsage: Int!
  usagePercentage: Float!
  lastUsed: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Usage analytics
  usageStats(timeRange: TimeRange): UsageStats!
  performanceMetrics: KeyPerformanceMetrics!
}

enum ServiceProvider {
  OPENROUTER
  SERPAPI
  JINA
  FIRECRAWL
  TAVILY
  EXA
  # Phase 5.1: Computer Vision APIs
  GOOGLE_VISION
  AWS_REKOGNITION
  AZURE_COMPUTER_VISION
  CUSTOM
}

# Phase 5.1: Computer Vision Types
enum VisionProvider {
  GOOGLE_VISION
  AWS_REKOGNITION
  AZURE_COMPUTER_VISION
}

enum VisionProcessingType {
  LABEL_DETECTION
  TEXT_DETECTION
  FACE_DETECTION
  OBJECT_DETECTION
  SAFE_SEARCH_DETECTION
  IMAGE_PROPERTIES
  CROP_HINTS
  WEB_DETECTION
  DOCUMENT_TEXT_DETECTION
  LANDMARK_DETECTION
  LOGO_DETECTION
  CELEBRITY_RECOGNITION
  MODERATION_LABELS
  IMAGE_ANALYSIS
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum VisionLikelihood {
  UNKNOWN
  VERY_UNLIKELY
  UNLIKELY
  POSSIBLE
  LIKELY
  VERY_LIKELY
}

type VisionProcessingJob {
  id: ID!
  userId: ID!
  imageUrl: String
  imageData: String
  processingType: VisionProcessingType!
  provider: VisionProvider!
  status: ProcessingStatus!
  results: VisionResults
  errorMessage: String
  processingTimeMs: Int
  costCents: Int
  createdAt: String!
  completedAt: String
  metadata: JSON
}

type VisionResults {
  labels: [VisionLabel!]
  textDetections: [VisionTextDetection!]
  faces: [VisionFace!]
  objects: [VisionObject!]
  safeSearch: VisionSafeSearch
  imageProperties: VisionImageProperties
  cropHints: [VisionCropHint!]
  webDetection: VisionWebDetection
  landmarks: [VisionLandmark!]
  logos: [VisionLogo!]
  celebrities: [VisionCelebrity!]
  moderationLabels: [VisionModerationLabel!]
  rawResponse: JSON
}

type VisionLabel {
  name: String!
  confidence: Float!
  description: String
  category: String
  boundingBox: VisionBoundingBox
}

type VisionTextDetection {
  text: String!
  confidence: Float!
  language: String
  boundingBox: VisionBoundingBox
  textType: String
}

type VisionFace {
  boundingBox: VisionBoundingBox!
  confidence: Float!
  ageRange: VisionAgeRange
  gender: String
  emotions: [VisionEmotion!]
  landmarks: [VisionFaceLandmark!]
  attributes: VisionFaceAttributes
}

type VisionObject {
  name: String!
  confidence: Float!
  boundingBox: VisionBoundingBox!
  category: String
}

type VisionSafeSearch {
  adult: VisionLikelihood!
  spoof: VisionLikelihood!
  medical: VisionLikelihood!
  violence: VisionLikelihood!
  racy: VisionLikelihood!
}

type VisionImageProperties {
  dominantColors: [VisionColor!]!
  accentColor: String
  isBlackAndWhite: Boolean
  brightness: Float
  contrast: Float
  sharpness: Float
}

type VisionCropHint {
  boundingBox: VisionBoundingBox!
  confidence: Float!
  importanceFraction: Float
}

type VisionWebDetection {
  webEntities: [VisionWebEntity!]!
  fullMatchingImages: [VisionWebImage!]!
  partialMatchingImages: [VisionWebImage!]!
  pagesWithMatchingImages: [VisionWebPage!]!
  visuallySimilarImages: [VisionWebImage!]!
  bestGuessLabels: [String!]!
}

type VisionLandmark {
  name: String!
  confidence: Float!
  boundingBox: VisionBoundingBox
  location: VisionLocation
}

type VisionLogo {
  name: String!
  confidence: Float!
  boundingBox: VisionBoundingBox!
}

type VisionCelebrity {
  name: String!
  confidence: Float!
  boundingBox: VisionBoundingBox!
  urls: [String!]
  knownGender: String
}

type VisionModerationLabel {
  name: String!
  confidence: Float!
  parentName: String
}

type VisionBoundingBox {
  left: Float!
  top: Float!
  width: Float!
  height: Float!
}

type VisionAgeRange {
  low: Int!
  high: Int!
}

type VisionEmotion {
  emotionType: String!
  confidence: Float!
}

type VisionFaceLandmark {
  landmarkType: String!
  x: Float!
  y: Float!
}

type VisionFaceAttributes {
  smile: Boolean
  eyeglasses: Boolean
  sunglasses: Boolean
  beard: Boolean
  mustache: Boolean
  eyesOpen: Boolean
  mouthOpen: Boolean
}

type VisionColor {
  red: Int!
  green: Int!
  blue: Int!
  hexCode: String!
  pixelFraction: Float!
  score: Float!
}

type VisionWebEntity {
  entityId: String
  description: String!
  score: Float!
}

type VisionWebImage {
  url: String!
  score: Float!
}

type VisionWebPage {
  url: String!
  title: String
  score: Float!
}

type VisionLocation {
  latitude: Float!
  longitude: Float!
}

type VisionCostTracker {
  dailyCostCents: Int!
  monthlyCostCents: Int!
  dailyLimitCents: Int!
  monthlyLimitCents: Int!
  costPerRequest: JSON!
}

type ProviderInfo {
  provider: VisionProvider!
  displayName: String!
  isAvailable: Boolean!
  supportedTypes: [VisionProcessingType!]!
}

input VisionProcessingRequest {
  imageUrl: String
  imageData: String
  processingTypes: [VisionProcessingType!]!
  provider: VisionProvider
  options: VisionProcessingOptions
}

input VisionProcessingOptions {
  maxResults: Int
  minConfidence: Float
  language: String
  includeGeoResults: Boolean
  cropHintsAspectRatios: [Float!]
  faceAttributes: [String!]
}

type VisionProcessingResponse {
  jobId: ID!
  status: ProcessingStatus!
  results: VisionResults
  processingTimeMs: Int
  costCents: Int
  providerUsed: VisionProvider!
  errorMessage: String
}

# Phase 5.1: Image Classification Types
enum ImageModelType {
  GENERAL_CLASSIFICATION
  DOCUMENT_CLASSIFICATION
  MEDICAL_IMAGE_CLASSIFICATION
  SCIENTIFIC_DIAGRAM_CLASSIFICATION
  IMAGE_QUALITY_ASSESSMENT
  CONTENT_MODERATION_CLASSIFICATION
  CUSTOM_DOMAIN_CLASSIFICATION
}

enum MLFramework {
  TENSORFLOW
  PYTORCH
  KERAS
  SCIKIT_LEARN
  HUGGINGFACE
}

enum ModelStatus {
  DRAFT
  TRAINING
  TRAINED
  VALIDATING
  DEPLOYED
  DEPRECATED
  FAILED
}

enum TrainingJobStatus {
  QUEUED
  INITIALIZING
  DATA_LOADING
  TRAINING
  VALIDATING
  COMPLETED
  FAILED
  CANCELLED
}

enum OptimizerType {
  ADAM
  SGD
  RMSPROP
  ADAMW
  ADAGRAD
}

enum ServingPlatform {
  TENSORFLOW_SERVING
  TORCH_SERVE
  ONNX
  TRITON
  CUSTOM
}

type ImageClassificationModel {
  id: ID!
  name: String!
  modelType: ImageModelType!
  version: String!
  framework: MLFramework!
  status: ModelStatus!
  accuracyMetrics: AccuracyMetrics
  createdAt: String!
  updatedAt: String!
  createdBy: ID!
  metadata: JSON!
}

type AccuracyMetrics {
  accuracy: Float!
  precision: Float!
  recall: Float!
  f1Score: Float!
  top5Accuracy: Float
  validationLoss: Float!
  trainingLoss: Float!
  inferenceTimeMs: Float!
  modelSizeMb: Float!
}

type ImageClassificationJob {
  jobId: ID!
  modelId: ID!
  userId: ID!
  jobName: String!
  status: TrainingJobStatus!
  progress: Float!
  currentEpoch: Int!
  totalEpochs: Int!
  currentMetrics: TrainingMetrics
  bestMetrics: TrainingMetrics
  startedAt: String!
  estimatedCompletion: String
  completedAt: String
  errorMessage: String
}

type TrainingMetrics {
  epoch: Int!
  trainingLoss: Float!
  trainingAccuracy: Float!
  validationLoss: Float!
  validationAccuracy: Float!
  learningRate: Float!
  timestamp: String!
}

type ImageClassificationResponse {
  requestId: ID!
  modelId: ID!
  predictions: [ClassificationPrediction!]!
  inferenceTimeMs: Float!
  modelVersion: String!
  features: [Float!]
  metadata: JSON!
  timestamp: String!
}

type ClassificationPrediction {
  className: String!
  classId: Int!
  confidence: Float!
  probability: Float!
}

type TrainingStatistics {
  totalJobs: Int!
  completedJobs: Int!
  failedJobs: Int!
  activeJobs: Int!
  totalModels: Int!
  deployedModels: Int!
}

input ImageClassificationModelInput {
  name: String!
  modelType: ImageModelType!
  framework: MLFramework!
  architecture: JSON!
}

input TrainingConfigurationInput {
  datasetConfig: DatasetConfigurationInput!
  trainingParams: TrainingParametersInput!
  augmentationConfig: DataAugmentationConfigInput
  validationConfig: ValidationConfigurationInput!
  earlyStoppingConfig: EarlyStoppingConfigInput
}

input DatasetConfigurationInput {
  datasetName: String!
  datasetPath: String!
  numClasses: Int!
  classNames: [String!]!
  trainSplit: Float!
  validationSplit: Float!
  testSplit: Float!
  imageSize: [Int!]!
  batchSize: Int!
  shuffle: Boolean!
}

input TrainingParametersInput {
  epochs: Int!
  learningRate: Float!
  optimizer: OptimizerConfigInput!
  lossFunction: String!
  metrics: [String!]!
}

input OptimizerConfigInput {
  optimizerType: OptimizerType!
  parameters: JSON!
}

input DataAugmentationConfigInput {
  rotationRange: Float
  widthShiftRange: Float
  heightShiftRange: Float
  shearRange: Float
  zoomRange: Float
  horizontalFlip: Boolean!
  verticalFlip: Boolean!
  brightnessRange: [Float!]
  contrastRange: [Float!]
}

input ValidationConfigurationInput {
  validationFrequency: Int!
  validationMetrics: [String!]!
  saveBestModel: Boolean!
  monitorMetric: String!
}

input EarlyStoppingConfigInput {
  monitor: String!
  patience: Int!
  minDelta: Float!
  restoreBestWeights: Boolean!
}

input DeploymentConfigurationInput {
  servingConfig: ServingConfigurationInput!
  scalingConfig: ScalingConfigurationInput!
  monitoringConfig: MonitoringConfigurationInput!
}

input ServingConfigurationInput {
  modelName: String!
  modelVersion: String!
  servingPlatform: ServingPlatform!
}

input ScalingConfigurationInput {
  minReplicas: Int!
  maxReplicas: Int!
  targetCpuUtilization: Float!
  targetMemoryUtilization: Float!
}

input MonitoringConfigurationInput {
  enableMetrics: Boolean!
  enableLogging: Boolean!
  logLevel: String!
  metricsPort: Int!
  healthCheckPath: String!
  prometheusMetrics: Boolean!
}

input ImageClassificationRequestInput {
  modelId: ID!
  imageData: JSON!
  inferenceConfig: InferenceConfigInput!
}

input InferenceConfigInput {
  topK: Int
  confidenceThreshold: Float
  returnProbabilities: Boolean!
  returnFeatures: Boolean!
  batchSize: Int
}

enum ApiKeyStatus {
  ACTIVE
  INACTIVE
  RATE_LIMITED
  ERROR
  EXPIRED
}

# Research Workflow types
type ResearchWorkflow {
  id: UUID!
  name: String!
  description: String
  methodology: ResearchMethodology!
  status: WorkflowStatus!
  progress: Float!
  estimatedCompletion: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Relationships
  creator: User!
  template: ResearchTemplate
  executions: [WorkflowExecution!]!
  collaborators: [User!]!
  
  # Configuration
  configuration: WorkflowConfiguration!
  outputFormats: [OutputFormat!]!
  
  # Results
  results: WorkflowResults
  artifacts: [WorkflowArtifact!]!
}

enum WorkflowStatus {
  DRAFT
  READY
  RUNNING
  PAUSED
  COMPLETED
  FAILED
  CANCELLED
}

enum ResearchMethodology {
  DON_LIM
  NICK_SCAMARA
  HYBRID
  CUSTOM
}

# System Configuration types
type SystemConfiguration {
  id: UUID!
  version: String!
  environment: Environment!
  features: FeatureFlags!
  limits: SystemLimits!
  security: SecurityConfig!
  integrations: IntegrationConfig!
  updatedAt: DateTime!
}

enum Environment {
  DEVELOPMENT
  STAGING
  PRODUCTION
}

# V3.0.0 Feature types
type FederatedResearchNode {
  id: UUID!
  name: String!
  description: String!
  networkId: UUID!
  nodeType: FederatedNodeType!
  capabilities: [String!]!
  status: NodeStatus!
  endpoint: String!
  lastSeen: DateTime!
  
  # Network information
  network: FederatedNetwork!
  peers: [FederatedResearchNode!]!
  sharedResources: [SharedResource!]!
}

enum FederatedNodeType {
  COORDINATOR
  PARTICIPANT
  OBSERVER
  RESOURCE_PROVIDER
}

type KnowledgeGraph {
  id: UUID!
  name: String!
  description: String!
  domain: String!
  status: GraphStatus!
  statistics: GraphStatistics!
  configuration: GraphConfiguration!
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Graph data
  nodes: [KnowledgeNode!]!
  edges: [KnowledgeEdge!]!
  
  # Query capabilities
  sparqlEndpoint: String!
  queryEndpoint: String!
}

type KnowledgeNode {
  id: UUID!
  nodeType: NodeType!
  name: String!
  description: String
  properties: JSON!
  embeddingVector: [Float!]
  confidenceScore: Float!
  sourceType: SourceType!
  sourceId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Relationships
  incomingEdges: [KnowledgeEdge!]!
  outgoingEdges: [KnowledgeEdge!]!
  relatedNodes(limit: Int = 10): [KnowledgeNode!]!
}

# Input types
input LoginInput {
  username: String!
  password: String!
  rememberMe: Boolean = false
}

input CreateApiKeyInput {
  name: String!
  service: ServiceProvider!
  key: String!
  rateLimit: Int = 1000
}

input CreateWorkflowInput {
  name: String!
  description: String
  methodology: ResearchMethodology!
  templateId: UUID
  configuration: WorkflowConfigurationInput!
}

input PaginationInput {
  first: Int
  after: String
  last: Int
  before: String
}

input TimeRange {
  start: DateTime!
  end: DateTime!
}

# Filter types
input UserFilter {
  role: UserRole
  status: UserStatus
  search: String
}

input ApiKeyFilter {
  service: ServiceProvider
  status: ApiKeyStatus
  search: String
}

input WorkflowFilter {
  status: WorkflowStatus
  methodology: ResearchMethodology
  createdBy: UUID
  search: String
}

# Connection types (for pagination)
type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type UserEdge {
  node: User!
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

# Response types
type AuthPayload {
  token: String!
  refreshToken: String!
  user: User!
  expiresAt: DateTime!
}

type ApiKeyTestResult {
  success: Boolean!
  responseTime: Int!
  error: String
  metadata: JSON
}

type WorkflowExecution {
  id: UUID!
  workflowId: UUID!
  status: ExecutionStatus!
  progress: Float!
  startedAt: DateTime!
  completedAt: DateTime
  error: String
  results: JSON
}

enum ExecutionStatus {
  QUEUED
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}
